#!/bin/bash

# 获取当前脚本的执行路径
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null && pwd )"
COLOR_PATH=$(echo $DIR | sed 's/git\/command/common\/echo-color\/echocolorful.sh/')

# echo颜色配置路径
source ${COLOR_PATH}

# 初始化变量
function init()
{
    LOCALE=(LANG LC_COLLATE LC_CTYPE LC_MESSAGES LC_MONETARY LC_NUMERIC LC_TIME LC_ALL)
    LANGUAGE="zh_CN.UTF-8"

    for locale in "${LOCALE[@]}"; do
        export "$locale=$LANGUAGE"
    done

    # commit类型
    TYPE=(":sparkles: feature" \
          ":bug: fix" \
          ":rewind: revert" \
          ":twisted_rightwards_arrows: merge" \
          ":ambulance: hotfix" \
          ":recycle: refactor" \
          ":zap: performance" \
          ":ok_hand: review" \
          ":fire: removing" \
          ":wrench: configuration" \
          ":memo: docs" \
          ":art: style" \
          ":white_check_mark: test" \
          ":bookmark: release")
}

# 验证执行命令的目录是否为git项目
function verify()
{
    git rev-parse --show-toplevel > /dev/null 2>&1
    STATUS_CODE=$?
    if [[ "$STATUS_CODE" -ne 0 ]]; then
      >&2 echo ${RED}"fatal: Not a git repository (or any of the parent directories): .git"${CLOSE}
      exit $STATUS_CODE
    fi
}

# commit类型提示信息
function commitType()
{
    while [[ true ]]; do
      echo -e "${GREEN}请选择相关数字选项${CLOSE} ${CAYAN}[0-14]${CLOSE}> \c"
      read -e -n 2

      if [[ $REPLY -ge 0 && $REPLY -le 14 ]]; then
        if [[ $REPLY -eq 0 ]]; then
          echo -e ${RED}"退出本地提交"${CLOSE}
          exit
        fi
        type=${TYPE[$REPLY-1]}
        break
      else
        echo -e ${RED}"无效的输入, 请重新进行选择"${CLOSE} >&2
      fi
    done
}

# commit提示消息主体
function mainMessage()
{
    echo -e ${YELLOW}"选择您正在提交的类型:
        1. feature:       新功能 (Introducing new features)
        2. fix:           修复bug (Fixing a bug)
        3. revert:        撤销commit (Reverting commit)
        4. merge:         分支合并 (Merging branches)
        5. hotfix:        紧急热修复 (Critical hotfix)
        6. refactor:      重构 (Refactoring code)
        7. performance:   性能优化 (Improving performance)
        8. review:        代码review修改 (Updating code due to code review changes)
        9. removing:      删除文件或代码 (Removing code or files)
       10. configuration: 修改配置文件 (Changing configuration files)
       11. docs:          文档 (Writing docs)
       12. style:         格式化 (Improving structure / format of the code)
       13. test:          增加测试 (Adding tests)
       14. release:       发布版本 (Releasing / Version tags)
        0. quit:          退出 (Exit)
    "${CLOSE}

    # 获取提交的类型
    commitType

    echo -e "${GREEN}本次提交的范围, 建议填写版本号${CLOSE} (${CAYAN}\$version${CLOSE}): "
    read -e scope

    echo -e ${GREEN}'请添加简短的、必要的对本次提交的描述: '${CLOSE}
    read -e subject

    body_array=()
    MAX_BODY_LINE_NUMBER=100
    echo -e "${GREEN}添加一个对本次提交的完整描述(${CAYAN}支持多行输入${CLOSE}): ${CLOSE}"
    for (( i = 0; i < $MAX_BODY_LINE_NUMBER; i++ ));
    do
      read -e body
      if [[ -n $body ]]; then
        body_array[i]=$body
      else
        break
      fi
    done

    echo -e ${GREEN}"列出本次提交解决的、可以关闭的所有相关问题, ${CAYAN}建议使用关键字 refs、close: ${CLOSE}"${CLOSE}
    read -e footer
}

# commit其他提示消息
function otherMessage()
{
    SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
}

# 构建commit消息
function build()
{
    if [[ -z "$*" ]]; then
      ALL="-a"
    else
      ALL=$*
    fi

    COMMIT_MESSAGE_FILE="`git rev-parse --git-dir`COMMIT-MSG.tmp"

    echo "$type($scope): $subject" > $COMMIT_MESSAGE_FILE
    echo "" >> $COMMIT_MESSAGE_FILE
    for body in ${body_array[@]}; do
      echo "$body" >> $COMMIT_MESSAGE_FILE
    done
    echo "" >> $COMMIT_MESSAGE_FILE
    echo "$footer" >> $COMMIT_MESSAGE_FILE
    echo -e "\n" >> $COMMIT_MESSAGE_FILE
    echo "$SOB" >> $COMMIT_MESSAGE_FILE
}

# 执行提交
function run()
{
    GIT_COMMIT_COMMAND="git commit -F $COMMIT_MESSAGE_FILE $ALL"

    #echo $GIT_COMMIT_COMMAND
    res=$(eval $GIT_COMMIT_COMMAND)
    echo -e ${GREEN}"${res}"${CLOSE}
    if [[ $? -ne 0 ]]; then
      echo ""
      branch=$(git symbolic-ref HEAD 2>/dev/null | cut -d"/" -f 3)
      echo -e ${CAYAN}"On branch $branch"${CLOSE}
      echo -e ${CAYAN}"nothing to commit, working tree clean"${CLOSE}
    fi
}

# 清楚临时文件
function clean()
{
    rm -f $COMMIT_MESSAGE_FILE
}

oldIFS=$IFS
IFS=$'\n'

case $1 in
  * )
    init
    verify
    mainMessage
    otherMessage
    build "$@"
    run
    clean
    ;;
esac
IFS=$oldIFS